@startuml classes

class Maths {
    + Vector2::Vector2(const sf::Vector2<real>&)
    + real Vector2::dot(const Vector2&)
    + real Vector2::squared()
    + real length(const Vector2&)
    + real minQuadraticSolution(real, real, real, real)
}

class Ball {
    + real radius
    + Vector2 position
    + Vector2 velocity
    + int id

    + Ball(const Vector2&, const Vector2&)
    + void move(real)
    + bool processCollision(Ball&)
    + real timeUntilCollision(const Ball&, real)
    + bool moving()
}

abstract Border {
    + static bool processEdgeCollision(const Vector2&, Ball&)
    + virtual bool processCollision(Ball&)
    + virtual real timeUntilCollision(const Ball&, real)
}

class VerticalBorder {
    + real face
    + real top
    + real bottom
    + VerticalBorder(real, real, real)
    + bool processCollision(Ball&) const override
    + real timeUntilCollision(const Ball&, real) const override
}

class HorizontalBorder {
    + real face
    + real left
    + real right
    + HorizontalBorder(real, real, real)
    + bool processCollision(Ball&)
    + real timeUntilCollision(const Ball&, real)
}

class CueImage {
    - sf::ConvexShape shape
    + bool onTable
    + CueImage()
    + void setPosition(const Vector2&)
    + void setDirection(const Vector2&)
    + void draw(sf::RenderTarget&, sf::RenderStates)
}

class TableImage {
    - sf::RectangleShape borders
    - sf::RectangleShape surface
    - std::vector<sf::RectangleShape> pockets
    - void createCornerPockets()
    - void createCentralPockets()
    + TableImage()
    + void draw(sf::RenderTarget&, sf::RenderStates) const override
}

class Interface {
    - sf::RenderWindow window
    - Table& table
    - sf::Clock clock
    - real time
    - std::vector<sf::CircleShape> ballImages
    - CueImage cueImage
    - TableImage tableImage
    - void createBallImages(const std::vector<Ball>&)
    - void demonstrate()
    - void drawBall(const Ball&)
    - void drawScene()
    - void handleEvents()
    + explicit Interface(Table&)
    + void simulate()
    + Vector2 getStrikeVelocity()
    + bool restartAtTheEnd()
    + void kill()
    + bool isAlive()
    + void restart()
    + ~Interface()
}

class Table {
    + real borderWidth
    + real h
    + real w
    + real frictionAcceleration
    + std::vector<Ball> balls
    + std::vector<std::shared_ptr<Border>> borders
    + Table()
    + void createBalls()
    + void addVerticalBorder(real, real, real)
    + void addHorizontalBorder(real, real, real)
    + void createBorders()
    + void processCollisions()
    + real timeWithoutCollisions(real)
    + void simulate(real)
    + bool ballsMoving()
}

enum GameState {
    + strike
    + simulation
    + end
}

class Game {
    Table table
    GameState state
    Interface interface

    Game()
    void mainLoop()
}

Game --> Table
Game --> GameState
Game --> Interface

Table --> Ball
Table --> VerticalBorder
Table --> HorizontalBorder

Ball --> Maths

Border --> Maths
VerticalBorder --> Maths
HorizontalBorder --> Maths

Interface --> Ball
Interface --> Border
Interface --> Table
Interface --> TableImage
Interface --> CueImage


class VerticalBorder implements Border
class HorizontalBorder implements Border

@enduml